# In order to get the app and the database to communicate with each other, you have to setup static IP addresses on each container. Then, when registering MongoDB with Express in Expressâ€™s `server.js` file, you reference the static IP that you set for MongoDB in this file.

version: "3.7"

services:
  dev-react-express:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - .:/usr/src/app
      # The following line causes the node_modules directory in your container to be populated with the packages for each dependency and the node_modules directory on your local machine to remain empty. This ensures that the packages that are installed inside the container will not be overridden by your local project files.
      - /usr/src/app/node_modules
    ports:
      - 8080:8080
      - 9229:9229 # These ports are used for debugging
    # You have to run `npm install` to install the dependencies and `npm run dev` to start the app.
    # You have to use bash to execute the command otherwise you will get errors.
    command: bash -c "npm install && npm run dev"
    networks:
      react_express_net:
        ipv4_address: 172.28.1.1
    depends_on:
      - dev-mongodb

  dev-mongodb:
    image: bitnami/mongodb:latest
    ports:
      - "27020:27017"
    # Volumes allow you to persist data. See the README to find out where the MongoDB data are stored on the host machine.
    volumes:
      - type: volume
        source: mongodb_data_dev
        target: /bitnami
    networks:
      react_express_net:
        ipv4_address: 172.28.1.2

volumes:
  mongodb_data_dev:
    driver: local

networks:
  react_express_net:
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
